import{_ as r}from"./sas_elixir-uf67sMlj.js";import{_ as i,r as s,o as c,c as h,a as e,d as t,b as o,e as a}from"./app-ZMKfNt6_.js";const l={},d=a('<p><img src="'+r+'" alt="runes"></p><h1 id="runes" tabindex="-1"><a class="header-anchor" href="#runes" aria-hidden="true">#</a> Runes</h1><h2 id="what-are-they" tabindex="-1"><a class="header-anchor" href="#what-are-they" aria-hidden="true">#</a> What are they?</h2><p>Runes are special python scripts that can be distributed by the <code>Signals &amp; Sorcery</code> registry (aka the <a href="/vault">VAULT</a>). Runes discovered and run from within a Crucible plugin. They can be hosted locally, on a server, or in Google Colabs. They can be used to execute arbitrary code, or to wrap existing projects.</p><h2 id="how-do-i-use-a-rune" tabindex="-1"><a class="header-anchor" href="#how-do-i-use-a-rune" aria-hidden="true">#</a> How do I use a Rune?</h2><p>There are multiple ways to consume Runes. Lets start with the web plugin.</p>',6),u={href:"https://dawnet.tools/",target:"_blank",rel:"noopener noreferrer"},p=a("<li>Copy the &quot;token&quot; from the top right of the plugin.</li><li>Install the Runes CLI. See [Runes-CLI]/runes-cli/ for details. TLDR: <code>pip install runes-cli</code></li><li>Run the runes-cli in a terminal with the key word <code>runes</code>. Select <code>tokens</code>, then <code>add</code>, then paste the token copied from the plugin.</li><li>Run a pre-made Rune. From the runes-cli, select <code>runes (run or manage published runes)</code> then select an <code>available rune</code> from the list. I recommend starting with a rune that does not require a GPU. (look for CPU) Try the <code>Rune Template</code> for starter.</li><li>After the Rune has has started, you can interact with if from the Crucible Web plugin. Go back to the plugin and select the <code>Connected Runes</code> tab. You should see the Rune you started. Click on the Rune to interact with it!</li>",5),m=e("h1",{id:"elixir-client",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#elixir-client","aria-hidden":"true"},"#"),t(" Elixir Client")],-1),_=e("p",null,"The Elixir client is a Python package that enables you to write python functions, package the functions and expose them to Crucible plugins. It is a simple wrapper around the Signals & Sorcery API.",-1),y=e("h2",{id:"how-do-i-create-a-rune",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#how-do-i-create-a-rune","aria-hidden":"true"},"#"),t(" How do I create a Rune?")],-1),b={href:"https://github.com/shiehn/dawnet-remotes/blob/main/DAWNet_Remote_template.ipynb",target:"_blank",rel:"noopener noreferrer"},f=e("div",{class:"custom-container danger"},[e("p",{class:"custom-container-title"},"DANGER"),e("p",null,"NOTE: The system does not guarantee any security. Do not expose sensitive data in your remotes.")],-1);function w(g,x){const n=s("ExternalLinkIcon");return c(),h("div",null,[d,e("ol",null,[e("li",null,[t("Open the "),e("a",u,[t("Crucible Web"),o(n)]),t(" plugin in a browser.")]),p]),m,_,y,e("p",null,[t("Creating your own Rune is easy. Just copy and modify the "),e("a",b,[t("Rune Template"),o(n)]),t(". You will see a commented section indicating where to write your custom code. You can write any Python3 code you wish.")]),f])}const C=i(l,[["render",w],["__file","index.html.vue"]]);export{C as default};

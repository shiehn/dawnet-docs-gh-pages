import{_ as p}from"./sas_elixir-uf67sMlj.js";import{_ as c,r as t,o as r,c as u,a as n,d as s,b as a,w as i,e as o}from"./app-ZMKfNt6_.js";const d={},m=o('<p><img src="'+p+'" alt="elixirs"></p><h1 id="elixirs" tabindex="-1"><a class="header-anchor" href="#elixirs" aria-hidden="true">#</a> Elixirs</h1><h2 id="what-are-they" tabindex="-1"><a class="header-anchor" href="#what-are-they" aria-hidden="true">#</a> What are they?</h2><p>Elixir AIs are python scripts that are registered with the Signals &amp; Sorcery discovery server. They are triggered remotely by Crucible plugins. They can be run locally, on a remote server, or as Jupyter Notebooks. They can be used to execute arbitrary code, or to wrap existing libraries.</p><h2 id="how-do-i-use-them" tabindex="-1"><a class="header-anchor" href="#how-do-i-use-them" aria-hidden="true">#</a> How do I use them?</h2>',5),k=n("li",null,'Generate & copy a "token" from a Crucible Plugin interface (top bar).',-1),h=n("li",null,"Choose a colab below and follow the link.",-1),b=n("li",null,'Open the colab in Google Colab by clicking the "Open in Colab" button.',-1),v=n("li",null,[s('Paste the "token" into Colab. Find the token variable (called something similar to '),n("code",null,"dawnet_token"),s("). Set the value.")],-1),_=n("li",null,[s("At this point the Plugin and the Colab server should have "),n("code",null,"found"),s(" each other via the underlying web-socket server.")],-1),g=n("li",null,'Fill in values & files in the colab form. Click "Run" in the colab form.',-1),y=n("h2",{id:"google-colabs",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#google-colabs","aria-hidden":"true"},"#"),s(" Google Colabs")],-1),w=n("h1",{id:"elixir-client",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#elixir-client","aria-hidden":"true"},"#"),s(" Elixir Client")],-1),f=n("p",null,"The Elixir client is a Python package that enables you to write python functions, package the functions and expose them to Crucible plugins. It is a simple wrapper around the Signals & Sorcery API.",-1),x=n("h2",{id:"how-do-i-make-my-own",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#how-do-i-make-my-own","aria-hidden":"true"},"#"),s(" How do I make my own?")],-1),T=n("p",null,"Creating your own Elixir involves a few steps.",-1),N={href:"https://github.com/shiehn/elixirs/blob/main/elixir_template.ipynb",target:"_blank",rel:"noopener noreferrer"},W=n("li",null,[s("Test the "),n("code",null,".ipynb"),s(" file in a Jupyter Notebook")],-1),C=n("li",null,[s("Use the Runes-CLI to covert the "),n("code",null,".ipynb"),s(" file into an Elixir AI.")],-1),q=o(`<div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> elixir_client<span class="token punctuation">.</span>core <span class="token keyword">as</span> elixir 
<span class="token keyword">from</span> elixir_client <span class="token keyword">import</span> DAWNetFilePath<span class="token punctuation">,</span> ui_param

<span class="token comment"># The token is generated by the DAWNet plugin.  </span>
<span class="token comment"># It is used by the discovery server to associate the remote with the plugin.</span>
TOKEN<span class="token operator">=</span><span class="token string">&quot;0715c132-0b31-406e-b562-9206c479a48a&quot;</span> 

<span class="token comment"># The registered method can be named anything. Note: the method must be \`async\`.  </span>
<span class="token comment"># All parameters must be type hinted.  </span>
<span class="token comment"># 4 parameter types are supported: int, float, str, DAWNetFilePath</span>
<span class="token comment"># DAWNetFilePath is a special type. When the file is sent to the remote, it is intercepted by the system and </span>
<span class="token comment"># transported to a temp dir on the remote.  In this case the variable \`b\` is local path to the file.</span>

<span class="token comment"># The \`ui_param\` is an optional decorator. It is used to define how the parameter input UI will be rendered in the plugin.  </span>
<span class="token comment"># If the decorator is not used, the parameter will be rendered as a text input field. </span>
<span class="token decorator annotation punctuation">@ui_param</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;DAWNetNumberSlider&#39;</span><span class="token punctuation">,</span> <span class="token builtin">min</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> step<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@ui_param</span><span class="token punctuation">(</span><span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;DAWNetMultiChoice&#39;</span><span class="token punctuation">,</span> options<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;cherries&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;oranges&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;grapes&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">&#39;grapes&#39;</span><span class="token punctuation">)</span>
<span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">arbitrary_method</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> DAWNetFilePath<span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span> 
        <span class="token comment"># -----------------------------------------</span>
        <span class="token comment"># This is where you can write custom code to operate on the input params.</span>
        <span class="token comment"># ex param \`a\` could be the number of variations created from param \`b\` using something like MusicLM</span>
        <span class="token comment"># -----------------------------------------</span>
        
        <span class="token comment"># This is how you send results back to the plugin, when processing is complete.</span>
        <span class="token keyword">await</span> elixir<span class="token punctuation">.</span>results<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_file<span class="token punctuation">(</span>b<span class="token punctuation">)</span> 
        <span class="token comment"># This message is displayed in the plugin.</span>
        <span class="token keyword">await</span> elixir<span class="token punctuation">.</span>results<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_message<span class="token punctuation">(</span><span class="token string">&quot;This is a message XYZ&quot;</span><span class="token punctuation">)</span> 

        <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span> 
        <span class="token comment">#explicitly send an error message back to the plugin</span>
        <span class="token keyword">await</span> elixir<span class="token punctuation">.</span>results<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>add_error<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Method encountered an error: </span><span class="token interpolation"><span class="token punctuation">{</span>e<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>


<span class="token comment"># The token generated by the plugin. </span>
elixir<span class="token punctuation">.</span>set_token<span class="token punctuation">(</span>token<span class="token operator">=</span>TOKEN<span class="token punctuation">)</span>
<span class="token comment"># The name of the remote.  This is displayed in the plugin.</span>
elixir<span class="token punctuation">.</span>set_name<span class="token punctuation">(</span><span class="token string">&quot;My Remote Code&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># The description of the remote.  This is displayed in the plugin.</span>
elixir<span class="token punctuation">.</span>set_description<span class="token punctuation">(</span><span class="token string">&quot;This is not a real description.&quot;</span><span class="token punctuation">)</span>
<span class="token comment"># Register the method with the discovery server.</span>
elixir<span class="token punctuation">.</span>register_method<span class="token punctuation">(</span>arbitrary_method<span class="token punctuation">)</span>

<span class="token comment"># When a file is sent to the remote as a DAWNetFilePath, it will become available at this sample rate. </span>
elixir<span class="token punctuation">.</span>set_input_target_sample_rate<span class="token punctuation">(</span><span class="token number">44100</span><span class="token punctuation">)</span> <span class="token comment">#supported values [22050, 32000, 44100, 48000]</span>
<span class="token comment"># When a file is sent to the remote as a DAWNetFilePath, it will become available at this bit rate. </span>
elixir<span class="token punctuation">.</span>set_input_target_bit_depth<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span> <span class="token comment">#supported values [16, 24, 32]</span>
<span class="token comment"># When a file is sent to the remote as a DAWNetFilePath, it will become available with this number of channels.</span>
elixir<span class="token punctuation">.</span>set_input_target_channels<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment">#supported values [1, 2] mono/stereo respectively</span>
<span class="token comment"># When a file is sent to the remote as a DAWNetFilePath, it will become available in this format.</span>
elixir<span class="token punctuation">.</span>set_input_target_format<span class="token punctuation">(</span><span class="token string">&#39;wav&#39;</span><span class="token punctuation">)</span> <span class="token comment">#supported values [&quot;wav&quot;, &quot;mp3&quot;, &quot;aif&quot;, &quot;flac&quot;]</span>

<span class="token comment"># When results are sent back to the plugin, they will be sent at this sample rate.</span>
elixir<span class="token punctuation">.</span>set_output_target_sample_rate<span class="token punctuation">(</span><span class="token number">44100</span><span class="token punctuation">)</span>
<span class="token comment"># When results are sent back to the plugin, they will be sent at this bit rate.</span>
elixir<span class="token punctuation">.</span>set_output_target_bit_depth<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>
<span class="token comment"># When results are sent back to the plugin, they will be sent with this number of channels.</span>
elixir<span class="token punctuation">.</span>set_output_target_channels<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token comment"># When results are sent back to the plugin, they will be sent in this format.</span>
elixir<span class="token punctuation">.</span>set_output_target_format<span class="token punctuation">(</span><span class="token string">&#39;wav&#39;</span><span class="token punctuation">)</span>

<span class="token comment"># This should be the last line of the script.  It connects to the discovery server and waits for a remote trigger.</span>
elixir<span class="token punctuation">.</span>connect_to_server<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container danger"><p class="custom-container-title">DANGER</p><p>NOTE: The system does not guarantee any security. Do not expose sensitive data in your remotes.</p></div>`,2);function A(E,I){const e=t("RouterLink"),l=t("ExternalLinkIcon");return r(),u("div",null,[m,n("ol",null,[n("li",null,[s("Install a "),a(e,{to:"/crucible-plugins/"},{default:i(()=>[s("Crucible plugin")]),_:1}),s(".")]),k,h,b,v,_,g]),y,n("p",null,[s("Find premade Elixirs here: "),a(e,{to:"/vault/#google-colabs"},{default:i(()=>[s("Google CoLabs")]),_:1})]),w,f,x,T,n("ul",null,[n("li",null,[s("Copy and modify the "),n("a",N,[s("Elixir Template"),a(l)]),s(". You will see a commented section indicating where to write your custom code. You can write any Python3 code you wish.")]),W,C]),q])}const F=c(d,[["render",A],["__file","index.html.vue"]]);export{F as default};
